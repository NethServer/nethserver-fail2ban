#!/usr/bin/perl
#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#
# the purpose is to count how many time the IP is banned by different jails
# if the counter is not equal to zero, then a jail is still active and the 
# IP is not allowed. This is due to the bad implementation of shorewall in fail2ban
# https://github.com/fail2ban/fail2ban/issues/2031

use utf8;
use JSON;
use esmith::Logger;
binmode STDOUT, ":utf8";

my ($action,$ip,$jail) = @ARGV;
my $jsonFile = '/var/lib/nethserver/fail2ban/fail2ban.json';
my $json ='{"TotalBannedIP": {},"IPList": {},"IPDebug": {}}';

#write to logs
sub log2messages
{
    my $message = shift;
    tie *FH, 'esmith::Logger';
    print FH "$message";
    close FH;
}

#encode Json file
sub encodeJSON {
      $data = shift;
      umask 022;
      open my $fh, ">", $jsonFile;
      print $fh encode_json($data);
      close $fh;
}

if ( ! -d '/var/lib/nethserver/fail2ban') {
      umask 022;
      mkdir '/var/lib/nethserver/fail2ban';
}


#decode Json
if ( -f $jsonFile )    {
    open my $fh, "<", $jsonFile;
    $json = <$fh>;
    close $fh;

    #Json validation
    unless (eval {decode_json($json)}) {
        unlink $jsonFile;
        $json ='{"TotalBannedIP": {},"IPList": {},"IPDebug": {}}';
    }
}

my $data = decode_json($json);

if ($action eq 'drop') {

    # Retrieve the statistic counter
    my $counterStat = $data->{'TotalBannedIP'}{$jail} || 0;
    $counterStat++;
    $data->{'TotalBannedIP'}->{$jail}= $counterStat;

    # retrieve the IP counter
    my $counterIP = $data->{'IPList'}{$ip} || 0;
    $counterIP++;
    $data->{'IPList'}->{$ip} = $counterIP;
    $data->{'IPDebug'}->{$ip} = localtime().'|JAIL '.$jail.'|ACTION '.$action;
    # Encode jsonFile
    encodeJSON ($data);

    if (system ("/usr/bin/timeout 10 /usr/sbin/shorewall drop $ip")) {
        log2messages("[ERROR] Fail2ban failed to drop $ip, wait 10 seconds and retry: $?");
        system ('/usr/bin/systemctl restart shorewall') == 0 or die ("Cannot restart fail2ban: $?");
        sleep 10;
        system ("/usr/sbin/shorewall drop $ip") == 0 or die ("Fai2ban cannot ban $ip via shorewall: $?");
    }

}

elsif ($action eq 'allow') {

    # retrieve the IP counter
    my $counterIP = $data->{'IPList'}{$ip} || 0;
    $counterIP--;
    $data->{'IPList'}->{$ip}= $counterIP;
    $data->{'IPDebug'}->{$ip} = localtime().'|JAIL '.$jail.'|ACTION '.$action;

    # Encode jsonFile
    encodeJSON ($data);

    # the counter is decreased after each unban
    # If <= 0, then unban and delete key, last ban is over
    # For recidive always unban and delete key
    if (($counterIP <= '0') ||
        ($jail eq 'recidive')) {

        delete $data->{'IPList'}->{$ip};
        delete $data->{'IPDebug'}->{$ip}; 
        #Encode Json
        encodeJSON ($data);

        if (system ("/usr/bin/timeout 10 /usr/sbin/shorewall allow $ip")) {
            log2messages("[ERROR] Fail2ban failed to allow $ip, wait 10 seconds and retry: $?");
            system ('/usr/bin/systemctl restart shorewall') == 0 or die ("Fail2ban cannot restart shorewall: $?");
            sleep 10;
            system ("/usr/sbin/shorewall allow $ip") == 0 or die ("Fai2ban cannot allow $ip via shorewall: $?");
        }

    }
}
